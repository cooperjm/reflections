What happens when you initialize a repository? Why do you need to do it?

	It creates the repository with no commits. You need to make your first commit.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It holds what you want to commit at that time, it gets it ready for the commit.
	This will allow you to make changes before you make a commit.

How can you use the staging area to make sure you have one commit per logical
change?
	
	By comparing staging area with working directory using git diff.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When adding/testing new features.  It helps by essentially keeping to versions.

How do the diagrams help you visualize the branch structure?

	It creates a visual representation of the branch sturcture

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result is combining code and commits into one branch. To visualy communicate the 		changes.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Pro - faster
	Con- Have to fix conflicts


Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
Contact GitHub API Training Shop Blog About

